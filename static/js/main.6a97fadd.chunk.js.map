{"version":3,"sources":["Table.js","Form.js","App.js","reportWebVitals.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","Table_TableHeader","Table_TableBody","Form","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","onFormSubmit","preventDefault","handleSubmit","state","initialState","_this$state","onSubmit","for","type","id","onChange","Component","App","characters","filter","character","i","concat","toConsumableArray","className","src_Table","src_Form","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.6a97fadd.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst TableHeader = () => {\n    return (\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Job</th>\n          </tr>\n        </thead>\n    );\n}\n\nconst TableBody = (props) => {\n    const rows = props.characterData.map((row, index) => {\n        return (\n            <tr key = {index}>\n                <td>{row.name}</td>\n                <td>{row.job}</td>\n                <td>\n                    <button onClick = {() => props.removeCharacter(index)}>Delete</button>\n                </td>\n            </tr>\n        );\n    });\n\n    return <tbody>{rows}</tbody>;\n}\n\n// simple component not Table class component\nconst Table = (props) => {\n    const { characterData, removeCharacter } = props\n  \n    return (\n    <table>\n        <TableHeader />\n        <TableBody characterData = {characterData} removeCharacter = {removeCharacter} />\n    </table>\n    );\n}\n\n// if Table was class component\n// class Table extends Component {\n//     render() {\n//         const { characterData } = this.props\n\n//         return (\n//             <table>\n//                 <TableHeader />\n//                 <TableBody characterData={characterData} />\n//             </table>\n//         )\n//     }\n// }\n\nexport default Table;","import React, { Component } from 'react'\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n    \n        this.initialState = {\n            name: '',\n            job: '',\n        };\n        \n        this.state = this.initialState;\n\n    }\n\n    // updates Form state when field is changed\n    handleChange = (event) => {\n        const { name, value } = event.target;\n\n        this.setState({\n            [name]: value,\n        });\n    }\n\n    // pass the Form state through as character parm set earlier\n    // using latest version on Github\n    onFormSubmit = (event) => {\n        event.preventDefault();\n\n        this.props.handleSubmit(this.state)\n        this.setState(this.initialState)\n    }\n\n\n    render() {\n        // get two properties from state\n        // use as form keys\n        const { name, job } = this.state;\n\n        return (\n            <form onSubmit = {this.onFormSubmit}>\n                <label for=\"name\">Name</label>\n                <input\n                    type=\"text\"\n                    name = \"name\"\n                    id= \"name\"\n                    value= {name}\n                    onChange={this.handleChange} />\n                <label for =\"job\">Job</label>\n                <input \n                    type=\"text\"\n                    name=\"job\"\n                    id=\"job\"\n                    value={job}\n                    onChange={this.handleChange} />\n                <button type = \"submit\">\n                    Submit\n                </button>\n            </form>\n        );\n    }\n}\n\nexport default Form;","// import { render } from '@testing-library/react'\nimport React, { Component } from 'react'\nimport Table from './Table'\nimport Form from './Form'\n\n\nclass App extends Component {\n    state = {\n      characters: [],\n    };\n\n    removeCharacter = (index) => {\n      const { characters } = this.state;\n    \n      // use setState to modify array\n      this.setState({\n        // filter creates a new array, no mutation\n        characters: characters.filter((character, i) => {\n          return i !== index;\n        }),\n      });\n    }\n\n    // update the new character param using the ES6 operator (...)\n    // like lambda function in python, feed iterable input as multiple params\n    handleSubmit = (character) => {\n      this.setState({ characters: [...this.state.characters, character]});\n\n    }\n\n    render() {\n      const { characters } = this.state;\n    \n      return (\n        <div className = \"container\">\n          <h1>React Tutorial</h1>\n          <p>Add a character with a name and a job to the table</p>\n          <Table \n            characterData = {characters} \n            removeCharacter = {this.removeCharacter} />\n          <h3>Add New</h3>\n          <Form handleSubmit = {this.handleSubmit} /> \n        </div>\n      );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}